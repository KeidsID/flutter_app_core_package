part of 'error_pages.dart';

final Map<int, _GetDefinedErrorPage> _serverErrorPagesMap = {
  500: 'Internal Server Error',
  501: 'Not Implemented',
  502: 'Bad Gateway',
  503: 'Service Unavailable',
  504: 'Gateway Timeout',
  505: 'HTTP Version Not Supported',
  506: 'Variant Also Negotiates',
  507: 'Insufficient Storage',
  508: 'Loop Detected',
  510: 'Not Extended',
  511: 'Network Authentication Required',
}.map(
  (statusCode, name) => MapEntry(
    statusCode,
    ({Key? key, String? message}) {
      if (message == null) {
        return ErrorPage(key: key, statusCode: statusCode, name: name);
      }

      return ErrorPage(
        key: key,
        statusCode: statusCode,
        name: name,
        message: message,
      );
    },
  ),
);

class _ServerErrorPages {
  /// `500 Internal Server Error`
  ///
  /// The server has encountered a situation it does not know how to handle.
  final _GetDefinedErrorPage internalServerError;

  /// `501 Not Implemented`
  ///
  /// The server does not support the functionality required to fulfill the
  /// request.
  ///
  /// This status can also send a `Retry-After` header, telling the requester
  /// when to check back to see if the functionality is supported by then.
  ///
  /// If the server does recognize the method, but intentionally does not
  /// support it, the appropriate response is `405 Method Not Allowed`.
  final _GetDefinedErrorPage notImplemented;

  /// `502 Bad Gateway`
  ///
  /// The server, while acting as a gateway or proxy, received an invalid
  /// response from the upstream server.
  final _GetDefinedErrorPage badGateway;

  /// `503 Service Unavailable`
  ///
  /// The server is not ready to handle the request.
  ///
  /// Common causes are a server that is down for maintenance or that is
  /// overloaded. This response should be used for temporary conditions and the
  /// `Retry-After` HTTP header should, if possible, contain the estimated time
  /// for the recovery of the service.
  final _GetDefinedErrorPage serviceUnavailable;

  /// `504 Gateway Timeout`
  ///
  /// The server, while acting as a gateway or proxy, did not get a response in
  /// time from the upstream server that it needed in order to complete the
  /// request.
  final _GetDefinedErrorPage gatewayTimeout;

  /// `505 HTTP Version Not Supported`
  ///
  /// The HTTP version used in the request is not supported by the server.
  final _GetDefinedErrorPage httpVersionNotSupported;

  /// `506 Variant Also Negotiates`
  ///
  /// This status code is typically used in the context of Transparent Content
  /// Negotiation, as defined in
  /// [RFC 2295](https://datatracker.ietf.org/doc/html/rfc2295).
  ///
  /// When the server responds with a `506 Variant Also Negotiates` status code,
  /// it means that there is an issue with its internal configuration.
  /// Specifically, the chosen variant resource is also configured to engage in
  /// content negotiation, which makes it unsuitable as a proper negotiation
  /// endpoint.
  final _GetDefinedErrorPage variantAlsoNegotiates;

  /// `507 Insufficient Storage`
  ///
  /// The method could not be performed on the resource because the server is
  /// unable to store the representation needed to successfully complete the
  /// request.
  final _GetDefinedErrorPage insufficientStorage;

  /// `508 Loop Detected`
  ///
  /// The server detected an infinite loop while processing the request.
  final _GetDefinedErrorPage loopDetected;

  /// `510 Not Extended`
  ///
  /// This response status code is sent in the context of the HTTP Extension
  /// Framework, defined in
  /// [RFC 2774](https://datatracker.ietf.org/doc/html/rfc2774).
  ///
  /// In that specification a client may send a request that contains an
  /// extension declaration, that describes the extension to be used. If the
  /// server receives such a request, but any described extensions are not
  /// supported for the request, then the server responds with the `510` status
  /// code.
  final _GetDefinedErrorPage notExtended;

  /// `511 Network Authentication Required`
  ///
  /// The client needs to authenticate to gain network access.
  ///
  /// This status is not generated by origin servers, but by intercepting
  /// proxies that control access to the network.
  ///
  /// Network operators sometimes require some authentication, acceptance of
  /// terms, or other user interaction before granting access
  /// (for example in an internet caf√© or at an airport). They often identify
  /// clients who have not done so using their Media Access Control (MAC)
  /// addresses.
  final _GetDefinedErrorPage networkAuthenticationRequired;

  const _ServerErrorPages({
    required this.internalServerError,
    required this.notImplemented,
    required this.badGateway,
    required this.serviceUnavailable,
    required this.gatewayTimeout,
    required this.httpVersionNotSupported,
    required this.variantAlsoNegotiates,
    required this.insufficientStorage,
    required this.loopDetected,
    required this.notExtended,
    required this.networkAuthenticationRequired,
  });
}
